/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.iniciosesion;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Alan Mijares
 */
public class FotoPerfilAmigo extends javax.swing.JFrame {

    /**
     * Creates new form FotoPerfil
     */
    public FotoPerfilAmigo() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fotoperfil = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fotoperfil.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Volver");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fotoperfilLayout = new javax.swing.GroupLayout(fotoperfil);
        fotoperfil.setLayout(fotoperfilLayout);
        fotoperfilLayout.setHorizontalGroup(
            fotoperfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fotoperfilLayout.createSequentialGroup()
                .addContainerGap(322, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        fotoperfilLayout.setVerticalGroup(
            fotoperfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fotoperfilLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(266, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fotoperfil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fotoperfil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        Perfil_Amigo P = new Perfil_Amigo();
        Busqueda B = new Busqueda();
        P.actualizarNombreUsuario(B.idUsuarioSeleccionado);
        P.cargarImagenUsuario(B.idUsuarioSeleccionado);
        P.cargarImagenPortada(B.idUsuarioSeleccionado, P.fotoportada);
        P.cargarDestacadasPerfil(P.offset, B.idUsuarioSeleccionado);
        P.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    public void cargarImagenPerfil(int userId, final JPanel fotoperfil) {
        final Connection conn;  // Hacer final la variable
        final PreparedStatement stmt;  // Hacer final la variable
        final ResultSet rs;  // Hacer final la variable

        try {
            // Configuración de la conexión a la base de datos
            conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/facebook", "AlanMijares", "1");

            // Consulta SQL para obtener la imagen del usuario usando la columna 'ID_Usuario'
            String sql = "SELECT Foto_perfil FROM perfil_usuario WHERE ID_Usuario = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, userId); // Establecer el ID del usuario en la consulta

            // Ejecutar la consulta
            rs = stmt.executeQuery();

            // Usar invokeLater para asegurar que el código se ejecute en el hilo de la interfaz gráfica
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (rs.next()) {  // Si hay una imagen para el usuario
                            byte[] foto = rs.getBytes("Foto_perfil"); // Obtener el arreglo de bytes de la imagen

                            // Si la imagen no es nula
                            if (foto != null) {
                                // Crear un panel personalizado para dibujar la imagen
                                ImagenPanel panelImagen = new ImagenPanel(foto);

                                // Establecer el panel con la imagen en el JPanel fotoportada
                                fotoperfil.setLayout(new BorderLayout()); // O new GridBagLayout()
                                fotoperfil.add(panelImagen, BorderLayout.CENTER); // Añadir al centro
                                fotoperfil.revalidate();  
                                fotoperfil.repaint();
                            } else {
                                // Si no hay imagen, mostrar mensaje
                                JOptionPane.showMessageDialog(fotoperfil, "Usuario sin imagen de perfil.");
                            }
                        } else {
                            // Si no se encuentra el usuario en la base de datos
                            JOptionPane.showMessageDialog(fotoperfil, "Usuario no encontrado.");
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(fotoperfil, "Error al cargar la imagen.");
                    } finally {
                        // Cerrar recursos
                        try {
                            if (rs != null) rs.close();
                            if (stmt != null) stmt.close();
                            if (conn != null) conn.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            });

        } catch (SQLException e) {
            e.printStackTrace();
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    JOptionPane.showMessageDialog(fotoperfil, "Error al cargar la imagen.");
                }
            });
        }
    }
   
   class ImagenPanel extends JPanel {
    private BufferedImage imagen;

    public ImagenPanel(byte[] imageBytes) {
        try {
            // Convertir bytes a imagen
            imagen = ImageIO.read(new ByteArrayInputStream(imageBytes));
            
            // Establecer un layout y tamaño preferido
            setLayout(new BorderLayout());
            setPreferredSize(new Dimension(359, 149)); // Tamaño que mencionaste
        } catch (IOException e) {
            e.printStackTrace();
            imagen = null;
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (imagen != null) {
            // Escalar la imagen para que se ajuste al panel
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
        }
    }
}
    
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FotoPerfilAmigo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel fotoperfil;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
